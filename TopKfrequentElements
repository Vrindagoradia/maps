class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> freqMap;
        for(int num : nums){
            freqMap[num]++;
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> minHeap;
        for(auto& entry : freqMap){
            minHeap.push({entry.second,entry.first});
            if(minHeap.size()>k){
                minHeap.pop();
            }
        }
        vector<int> result;
        while(!minHeap.empty()){
            result.push_back(minHeap.top().second);
            minHeap.pop();
        }
        return result;
        
    }
    int main(){
        vector<int> nums={1,1,1,2,2,3};
        int k=2;
        vector<int> result=topKFrequent(nums,k);
        cout<<"top"<<k<<"most frequent elements :";
        for(int num: result){
            cout<<num<<" ";
        }
        cout<<endl;
        return 0;
    }
};
//https://leetcode.com/problems/top-k-frequent-elements/submissions/1599276256/
